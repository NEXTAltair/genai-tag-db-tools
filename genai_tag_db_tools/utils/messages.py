"""
エラーメッセージをまとめて定義するモジュール
1. 一貫性の確保: エラーメッセージを一箇所で管理することで、メッセージの一貫性を保つ。

2. 保守性の向上: エラーメッセージの修正や更新が必要な場合、一箇所で変更するだけで済むため、保守が容易になる。

3. 再利用性の向上: 同じエラーメッセージを複数の場所で使用する場合、定義された定数を参照するだけで済むため、コードの重複を避けることができる。

4. 多言語対応の容易さ: 国際化対応が必要な場合、エラーメッセージを別ファイルで管理することで、言語ごとのメッセージファイルを用意しやすくなる。

5. コードの可読性向上: エラーメッセージを一箇所にまとめることで、コードの構造が整理され、可読性が向上。

6. テストの容易さ: エラーメッセージが集中管理されているため、メッセージの内容や形式を一括でテストしやすくなる。
"""

class ErrorMessages:
    # --- 共通エラーメッセージ ---
    INVALID_INPUT = "無効な入力が指定されました。"
    DATABASE_ERROR = "データベースエラーが発生しました。"
    FILE_NOT_FOUND = "指定されたファイルが見つかりませんでした。"

    # --- データベース関連のエラーメッセージ ---
    # --- tag_repository.py ---
    DB_OPERATION_FAILED = "データベース操作に失敗しました: {error_msg}"
    TAG_ID_NOT_FOUND_AFTER_INSERT = "挿入後にタグ ID が見つかりませんでした。"
    INVALID_TAG_ID_DELETION_ATTEMPT = "存在しないタグID {tag_id} の削除を試みました。"
    MISSING_REQUIRED_FIELDS = "登録時に必要なデータが欠けています: {fields}"

class LogMessages:
    START_PROCESS = "プロセスを開始しました。"
    END_PROCESS = "プロセスが正常に終了しました。"
    ERROR_OCCURRED = "エラーが発生しました。"
