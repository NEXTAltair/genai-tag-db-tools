---
description: 
globs: tests/**/*
alwaysApply: false
---
version: 3.0.0
# テスト方針

## 基本方針

- 各機能にはテストを作成し、十分なテストカバレッジを確保する。
- Mockの仕様は極力避ける
- テストが想定通りにパスしない場合､テスト対象コードの設計変更をユーザーに提案する

## BDD (振る舞い駆動開発) の基本

- **Feature**:
  - テスト対象となる機能やユーザーストーリーを記述する。
  - ユーザー視点での価値や目的を明確にすることが重要である。
  - 具体的な関数名、メソッド名、ファイル名、Pathなどは含めないこと。
- **Scenario**:
  - Feature 内の具体的な振る舞いを検証する個別のテストケースである。
  - 一つのシナリオでは、一つの振る舞いに焦点を当てる。
- **Given / When / Then**:
  - **Given**: テスト実行前のシステムの初期状態や前提条件を設定する。
  - **When**: ユーザーの操作や、システムに対する特定のアクションを記述する。
  - **Then**: When のアクションによって期待される結果やシステムの応答を検証する。

## 異常系テスト

- **基本的な考え方**: 主要な正常系のパスがある程度確認できた段階で、代表的な異常系（エラーハンドリング、不正な入力、境界値など）のシナリオも計画・実装することを推奨する｡
- **デバッグ時の活用**: 正常系のテストが失敗した場合、その原因究明や特定の失敗パターンを再現するために、追加で異常系のシナリオを作成するアプローチも有効である。
- **目的**: 異常系テストは、システムが予期せぬ状況下でも安全に動作（クラッシュしない、意図しない挙動をしない、適切なエラーを示すなど）することを確認するために重要である。

## テストディレクトリ構造

```mermaid
graph TD
    A[tests/] --> B[unit/]
    A --> C[gui/]
    A --> D[resource/]
    A --> E[conftest.py]
    
    B --> F[test_tag_search.py]
    B --> G[test_tag_management.py]
    B --> H[test_database_operations.py]
    
    C --> I[test_main_window.py]
    C --> J[test_tag_widgets.py]
    
    D --> K[sample_tags.db]
    D --> L[test_data/]
```

## テストカテゴリ（pytest markers）

- **unit**: 単体テスト - 個別のクラス・関数のテスト
- **integration**: 統合テスト - サービス間の連携テスト
- **gui**: GUIテスト - ユーザーインターフェースのテスト
- **slow**: 長時間実行テスト - データベースやファイル操作の大規模テスト

## テストの執行

- `uv run pytest` コマンドで実行する
- コマンドオプションは必要に応じて使い分ける
- 基本的なテスト設定は [pyproject.toml](mdc:pyproject.toml) で設定する
- カバレッジの測定結果は @coverage.xml として出力する

## タグデータベース特有のテスト考慮事項

### データベーステスト
- テスト用の独立したSQLiteデータベースを使用
- トランザクションの分離とロールバック機能の検証
- 大量データでのパフォーマンステスト

### 検索機能テスト
- 部分一致、完全一致、正規表現検索の検証
- 大文字小文字の処理
- 特殊文字を含むタグの処理

### GUI機能テスト
- Headlessモード対応（Linux環境）
- ユーザー操作のシミュレーション
- 検索結果の表示・ソート機能

### データ整合性テスト
- タグの重複チェック
- 外部キー制約の検証
- マイグレーション処理の検証